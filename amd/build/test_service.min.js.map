{"version":3,"file":"test_service.min.js","sources":["../src/test_service.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org///\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test service call.\n * @module     metadataextractor_tika/test_service\n * @copyright  2023 Rossco Hellmans <rosscohellmans@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Ajax from 'core/ajax';\nimport * as LoadingIcon from 'core/loadingicon';\nimport * as Notification from 'core/notification';\nimport * as Templates from 'core/templates';\n\n/**\n * Check if the service is ready.\n *\n * @method isServiceReady\n * @return {boolean} If the service is ready\n */\nconst isServiceReady = () => {\n    var request = {\n        methodname: 'metadataextractor_tika_is_service_ready',\n        args: {}\n    };\n    return Ajax.call([request])[0];\n};\n\n/**\n * Check if the service is ready.\n *\n * @method testService\n * @param {object} container the container to show the HTML\n * @param {string} serviceName the name of the service\n */\nconst testService = (container, serviceName) => {\n    var isServiceReadyPromise = isServiceReady();\n    LoadingIcon.addIconToContainer(container, isServiceReadyPromise);\n\n    isServiceReadyPromise.then(function(ready) {\n        var contentPromise = Templates.render('metadataextractor_tika/service_status', {\n            ready: ready.ready,\n            servicename: serviceName\n        });\n\n        contentPromise.then(function(html, js) {\n            return Templates.replaceNodeContents(container, html, js);\n        }).catch(Notification.exception);\n\n        return isServiceReadyPromise;\n    }).catch(Notification.exception);\n};\n\n/**\n * Init the event watcher.\n *\n * @param {string} containerId The ID of the container to place the HTML\n * @param {string} buttonId The ID of the button to watch for click events\n * @param {string} serviceName The service name\n */\nexport const init = (containerId, buttonId, serviceName) => {\n    var button = $(\"#\" + buttonId);\n    var container = $(\"#\" + containerId);\n\n    button.on(\"click\", function(event) {\n        event.preventDefault();\n        testService(container, serviceName);\n    });\n};\n"],"names":["testService","container","serviceName","isServiceReadyPromise","Ajax","call","methodname","args","LoadingIcon","addIconToContainer","then","ready","Templates","render","servicename","html","js","replaceNodeContents","catch","Notification","exception","containerId","buttonId","button","on","event","preventDefault"],"mappings":";;;;;;2vCAgDMA,YAAc,CAACC,UAAWC,mBACxBC,sBAXGC,KAAKC,KAAK,CAJH,CACVC,WAAY,0CACZC,KAAM,MAEkB,GAY5BC,YAAYC,mBAAmBR,UAAWE,uBAE1CA,sBAAsBO,MAAK,SAASC,cACXC,UAAUC,OAAO,wCAAyC,CAC3EF,MAAOA,MAAMA,MACbG,YAAaZ,cAGFQ,MAAK,SAASK,KAAMC,WACxBJ,UAAUK,oBAAoBhB,UAAWc,KAAMC,OACvDE,MAAMC,aAAaC,WAEfjB,yBACRe,MAAMC,aAAaC,0BAUN,CAACC,YAAaC,SAAUpB,mBACpCqB,QAAS,mBAAE,IAAMD,UACjBrB,WAAY,mBAAE,IAAMoB,aAExBE,OAAOC,GAAG,SAAS,SAASC,OACxBA,MAAMC,iBACN1B,YAAYC,UAAWC"}